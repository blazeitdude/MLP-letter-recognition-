#include <gtest/gtest.h>

#include <vector>

#include "../headers/Emnist_sample.hpp"
#include "../headers/Net.hpp"
#include "../headers/GraphNet.hpp"
#include "../headers/MatrixNet.hpp"

TEST(readModel, ReadFile) {
  s21::Emnist_reader reader;
  reader.connect("./logic/tests/letterA.txt");
  s21::Sample sample = reader.getSample();
  std::vector<double> input = {
      1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   2,   4,   4,   4,
      4,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   7,   32,  37,  51,  82,  125, 127, 127, 125, 113,
      33,  8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   3,   10,  34,  113, 125, 140, 172, 213, 213, 213, 214, 202, 90,  33,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   22,  83,
      128, 175, 242, 242, 218, 213, 172, 143, 149, 236, 250, 190, 102, 3,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   33,  79,  171, 208, 232,
      243, 220, 141, 127, 83,  59,  84,  227, 249, 183, 94,  3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   8,   90,  159, 231, 243, 243, 207, 159,
      52,  38,  23,  30,  87,  234, 250, 184, 94,  3,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   22,  79,  218, 245, 222, 176, 128, 46,  22,  1,   0,
      9,   50,  139, 250, 251, 169, 80,  2,   0,   0,   0,   0,   0,   0,   0,
      0,   1,   47,  127, 243, 248, 175, 100, 48,  8,   3,   0,   0,   24,  84,
      173, 251, 246, 127, 46,  0,   0,   0,   0,   0,   0,   0,   0,   3,   22,
      159, 220, 233, 187, 67,  20,  3,   0,   0,   8,   33,  131, 187, 234, 251,
      227, 78,  29,  1,   0,   0,   0,   0,   0,   0,   1,   10,  47,  207, 243,
      209, 132, 22,  6,   1,   4,   5,   36,  91,  207, 234, 249, 252, 236, 134,
      79,  7,   0,   0,   0,   0,   0,   0,   7,   34,  95,  232, 248, 171, 84,
      5,   3,   9,   32,  38,  96,  164, 244, 252, 254, 254, 249, 206, 152, 19,
      2,   0,   0,   0,   0,   0,   34,  115, 203, 251, 234, 93,  44,  50,  84,
      127, 204, 216, 234, 247, 252, 251, 251, 254, 254, 233, 170, 20,  2,   0,
      0,   0,   0,   0,   50,  139, 220, 251, 227, 96,  91,  139, 172, 208, 245,
      249, 250, 249, 233, 223, 225, 250, 254, 220, 139, 9,   0,   0,   0,   0,
      0,   2,   82,  172, 233, 252, 236, 161, 175, 220, 233, 245, 253, 251, 233,
      220, 173, 148, 161, 241, 252, 204, 115, 4,   0,   0,   0,   0,   0,   4,
      125, 215, 249, 255, 254, 250, 245, 222, 217, 217, 203, 170, 84,  50,  25,
      42,  118, 246, 250, 140, 50,  0,   0,   0,   0,   0,   0,   4,   127, 217,
      250, 254, 254, 245, 221, 141, 129, 127, 114, 82,  22,  9,   7,   39,  127,
      249, 249, 127, 38,  0,   0,   0,   0,   0,   0,   3,   109, 190, 229, 233,
      220, 158, 91,  11,  5,   4,   4,   2,   0,   0,   22,  84,  173, 245, 220,
      77,  20,  0,   0,   0,   0,   0,   0,   2,   65,  121, 168, 170, 139, 77,
      33,  1,   0,   0,   0,   0,   0,   0,   46,  127, 208, 231, 175, 34,  7,
      0,   0,   0,   0,   0,   0,   0,   20,  45,  80,  80,  50,  20,  7,   0,
      0,   0,   0,   0,   0,   4,   84,  170, 229, 206, 127, 10,  1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   2,   2,   0,   0,   0,   0,   0,   0,
      0,   0,   18,  63,  176, 199, 172, 78,  32,  0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      26,  90,  180, 153, 94,  22,  7,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,   18,
      31,  20,  7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   2,   3,   2,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0};
  ASSERT_EQ(sample.answer, input[0]);
  for (size_t i = 0; i < sample.pixels.size(); i++) {
    ASSERT_EQ(input[i + 1] / 255.0, sample.pixels[i]);
  }
}

TEST(matrixNetwork, checkAnswerOne) {
  s21::NetInterface* neural = new s21::GraphNet();

  neural->setLayers(neural->getLayersVect(2));
  neural->readExperience("./weights/weights_2.txt");

  std::vector<double> input = {
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,
      79,  157, 121, 50,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   20,  123, 245, 254,
      215, 38,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   7,   100, 231, 234, 217, 153, 20,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   22,  163, 246, 207, 36,  5,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   2,   36,  159, 246, 207, 59,  1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   36,  158,
      233, 248, 163, 22,  1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   3,   91,  202, 234, 250, 164, 52,
      7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   3,   79,  221, 253, 252, 189, 33,  1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      4,   11,  115, 172, 247, 254, 255, 250, 127, 0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   7,   34,  114, 141,
      243, 245, 217, 236, 254, 250, 127, 0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   113, 241, 233, 217, 170, 79,
      6,   143, 251, 250, 141, 1,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   127, 241, 48,  5,   2,   0,   5,   216,
      254, 254, 244, 47,  1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   125, 202, 8,   0,   0,   0,   22,  233, 247, 235,
      252, 159, 23,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   49,  31,  0,   0,   0,   0,   114, 249, 139, 49,  207, 249,
      195, 12,  4,   0,   0,   4,   11,  77,  113, 32,  0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   3,   172, 177, 34,  1,   47,  230, 250, 222,
      204, 140, 140, 204, 222, 247, 248, 124, 0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   21,  231, 129, 5,   0,   5,   83,  175, 251, 253, 250,
      250, 253, 254, 254, 232, 81,  0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   3,   84,  252, 125, 4,   0,   0,   0,   7,   81,  127, 127, 127, 127,
      127, 127, 77,  7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   21,
      170, 247, 77,  2,   0,   0,   0,   0,   2,   4,   4,   4,   4,   4,   4,
      2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   51,  221, 173,
      3,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   3,   171, 251, 114, 0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   21,  232, 250, 50,  0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   50,  241, 163, 7,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   4,   114, 176, 36,  0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      2,   76,  106, 4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0};
  neural->feedInitValues(input);
  neural->forwardFeed();

  ASSERT_EQ(neural->getResult() + 65, 'V');
}

TEST(matrixNetwork, checkAnswerTwo) {
  s21::NetInterface* neural = new s21::GraphNet();

  neural->setLayers(neural->getLayersVect(2));
  neural->readExperience("./weights/weights_2.txt");

  std::vector<double> input = {
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   20,  37,  37,  37,  32,  7,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   7,   47,  159, 215, 217, 217, 202, 90,  7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      33,  90,  207, 247, 254, 254, 254, 253, 207, 47,  1,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   115, 202,
      253, 254, 254, 251, 252, 254, 247, 163, 33,  7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   22,  172, 233, 254, 253,
      221, 143, 189, 252, 254, 244, 126, 46,  0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   2,   82,  232, 251, 254, 234, 96,  13,
      84,  232, 254, 254, 204, 115, 4,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   9,   139, 250, 254, 254, 217, 39,  0,   22,  171,
      251, 254, 233, 172, 21,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   46,  208, 254, 254, 254, 217, 37,  0,   3,   83,  232, 254,
      249, 216, 38,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      4,   114, 245, 254, 254, 254, 217, 37,  0,   0,   22,  172, 252, 252, 233,
      82,  2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   127,
      250, 254, 255, 254, 203, 32,  0,   0,   5,   127, 249, 254, 249, 125, 4,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   127, 250, 255,
      254, 250, 139, 9,   0,   0,   2,   82,  233, 254, 250, 127, 4,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   4,   125, 249, 254, 254, 232,
      82,  2,   0,   0,   0,   39,  217, 254, 250, 140, 9,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   4,   113, 241, 250, 249, 206, 46,  0,
      0,   0,   0,   37,  217, 254, 252, 172, 21,  0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   32,  113, 127, 125, 77,  7,   0,   0,   0,
      0,   37,  217, 254, 254, 215, 37,  0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   4,   4,   4,   2,   0,   0,   0,   0,   0,   37,
      217, 254, 254, 217, 37,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   32,  203, 254,
      254, 217, 37,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9,   140, 250, 254, 217,
      39,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   4,   127, 250, 254, 228, 69,  1,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   4,   127, 250, 254, 222, 51,  0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   4,   127, 250, 254, 233, 82,  2,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   4,   127, 250, 254, 249, 125, 4,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      4,   125, 247, 253, 247, 125, 4,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   2,   65,
      169, 202, 169, 65,  2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   2,   21,  32,
      21,  2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0};

  neural->feedInitValues(input);
  neural->forwardFeed();
  ASSERT_EQ(neural->getResult() + 65, 'M');
}

int main(int argc, char* argv[]) {
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}